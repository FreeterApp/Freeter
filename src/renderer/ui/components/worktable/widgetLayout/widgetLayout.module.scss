/*
 * Copyright: (c) 2024, Alex Kaul
 * GNU General Public License v3.0 or later (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
 */

.widgetLayout, .no-widgets {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

.widgetLayout {
  overflow: scroll;
  visibility: hidden;

  &.is-drop-area * {
    pointer-events: none; // fixes issues caused by dragleave called when dragging over layout items
  }

  &.is-visible {
    visibility: visible;
  }

  &:has(.is-maximized) {
    overflow: hidden;
  }

  &::-webkit-scrollbar{
    display: none;
    // width: 6px;
    // height: 6px;
  }
  // &:not(:hover) {
  //   &::-webkit-scrollbar{
  //     display: none;
  //   }
  // }
  // &::-webkit-scrollbar-thumb{
  //   opacity: 0;
  //   transition: opacity 200ms ease;
  // }
  // &:hover::-webkit-scrollbar-thumb{
  //   opacity: 0;
  // }
}

.no-widgets {
  background-color: var(--freeter-worktableBackground);
}

.edit-mode-icon {
  display: inline-block;
  vertical-align: middle;
  margin: 0 6px;
  color: var(--freeter-inAppNoteIconColor);
  width: 24px;
  height: 24px;
}


.layout-item {
  position: absolute;
  transition: all 100ms ease;
  // transition-property: transform;
  border: 1px solid var(--freeter-widgetLayoutItemBorder);
  box-sizing: border-box;
  z-index: 0;

  /* Absolute positioned elements ignore the padding of the parent. */
  /* This fix adds padding at the bottom of the widget layout using a transparent padding-size element. */
  &:after {
    content: "";
    display: block;
    position: absolute;
    bottom: -6px;
    right: -6px;
    width: 6px;
    height: 6px;
  }

  &[draggable=true]:hover {
    // border-style: dotted;
    border-color: var(--freeter-widgetLayoutItemEditHoverBorder);
  }

  &.is-dragging {
    display: none;
  }
  &.is-resizing {
    opacity: var(--freeter-widgetLayoutItemResizingOpacity);
    border-color: var(--freeter-widgetLayoutItemResizingBorder);
  }
  &.is-dragging, &.is-resizing {
    transition-property: none;
    z-index:1;
  }
  &.is-maximized {
    // top: 6px !important;
    // left: 6px !important;
    // right: 6px !important;
    // bottom: 6px !important;
    // transform: none !important;
    // width: auto !important;
    // height: auto !important;
    transition: all 100ms ease;
    z-index: 1;
    box-shadow: 0 0 8px 0 var(--freeter-widgetLayoutItemShadow);
  }
  .resize-handle {
    position: absolute;
    z-index:0;
    &.e, &.w, &.ne {
      width: 10px;
    }
    &.sw, &.se, &.nw {
      width: 20px;
    }
    &.n, &.s, &.ne {
      height: 10px;
    }
    &.sw, &.se, &.nw {
      height: 20px;
    }

    &.sw {
      bottom: -1px;
      left: -1px;
      cursor: sw-resize;
    }
    &.se {
      bottom: -1px;
      right: -1px;
      cursor: se-resize;
        // &::after {
        //   content: "";
        //   position: absolute;
        //   right: 3px;
        //   bottom: 3px;
        //   width: 5px;
        //   height: 5px;
        //   border-right: 2px solid rgba(0, 0, 0, 0.4);
        //   border-bottom: 2px solid rgba(0, 0, 0, 0.4);
        // }
    }
    &.nw {
      top: -1px;
      left: -1px;
      cursor: nw-resize;
    }
    &.ne {
      top: -1px;
      right: -1px;
      cursor: ne-resize;
    }
    &.w {
      top: -1px + 20px;
      bottom: -1px + 20px;
      cursor: ew-resize;
    }
    &.e {
      top: -1px + 10px;
      bottom: -1px + 20px;
      cursor: ew-resize;
    }
    &.w {
      left: -1px;
    }
    &.e {
      right: -1px;
    }
    &.n {
      left: -1px + 20px;
      right: -1px + 10px;
      cursor: ns-resize;
    }
    &.s {
      left: -1px + 20px;
      right: -1px + 20px;
      cursor: ns-resize;
    }
    &.n {
      top: -1px;
      // transform: rotate(225deg);
    }
    &.s {
      bottom: -1px;
      // transform: rotate(45deg);
    }
  }
}
